/*globals define*/
/*eslint-env node, browser*/

const Classifier = require("./Classifier");
const Notifier = require("./Notifier");
const PetriNet = require("./PetriNet");

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sun Dec 11 2022 16:33:43 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
  "plugin/PluginConfig",
  "text!./metadata.json",
  "plugin/PluginBase",
], function (PluginConfig, pluginMetadata, PluginBase) {
  "use strict";

  pluginMetadata = JSON.parse(pluginMetadata);

  /**
   * Initializes a new instance of PetriNet.
   * @class
   * @augments {PluginBase}
   * @classdesc This class represents the plugin PetriNet.
   * @constructor
   */
  function PetriNetPlugin() {
    // Call base class' constructor.
    PluginBase.call(this);
    this.pluginMetadata = pluginMetadata;
  }

  /**
   * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
   * This is also available at the instance at this.pluginMetadata.
   * @type {object}
   */
  PetriNetPlugin.metadata = pluginMetadata;

  // Prototypical inheritance from PluginBase.
  PetriNetPlugin.prototype = Object.create(PluginBase.prototype);
  PetriNetPlugin.prototype.constructor = PetriNetPlugin;

  /**
   * Main function for the plugin to execute. This will perform the execution.
   * Notes:
   * - Always log with the provided logger.[error,warning,info,debug].
   * - Do NOT put any user interaction logic UI, etc. inside this method.
   * - callback always has to be called even if error happened.
   *
   * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
   */
  PetriNetPlugin.prototype.main = function (callback) {
    // Use this to access core, project, result, logger etc from PluginBase.
    const self = this;
    const activeNode = self.activeNode;

    self.core.loadOwnSubTree(activeNode, (error, nodes) => {
      const net = new PetriNet(self.core, nodes, error);
      const classifier = new Classifier(net);
      const notifier = new Notifier(self.sendNotification, classifier);

      notifier.notify();
    });
  };

  return PetriNetPlugin;
});
